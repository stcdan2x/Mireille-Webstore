import express from "express";
import expressAsyncHandler from "express-async-handler";
import Order from "../models/orderModel";
import { isAuth } from "../utils";

const orderRouter = express.Router();

//route for creating an order
orderRouter.post("/", isAuth,
    expressAsyncHandler(
        async (req, res) => {
            const order = new Order({
                orderItems: req.body.orderItems,
                user: req.user._id, //use req.user because when isAuth runs, req.user is created and gets filled with user info from the decoded token generated by generateToken
                shipping: req.body.shipping,
                payment: req.body.payment,
                itemsPrice: req.body.itemsPrice,
                taxPrice: req.body.taxPrice,
                shippingPrice: req.body.shippingPrice,
                totalPrice: req.body.totalPrice
            });
            const createOrder = await order.save();
            res.status(201).send({ message: "New Order Successfully Created", order: createOrder });
        }
    )
);

//router to send back to frontend the orders of current user
orderRouter.get("/myorders", isAuth,
    expressAsyncHandler(
        async (req, res) => {
            //find orders by current user only
            const orders = await Order.find({ user: req.user._id });
            res.send(orders);
        }
    )
);

orderRouter.get("/:id", isAuth,
    expressAsyncHandler(
        async (req, res) => {
            const order = await Order.findById(req.params.id);
            if (order) {
                res.send(order);
            } else {
                res.status(404).send({ message: "Order Not Found" });
            }
        }
    )
);

orderRouter.put("/:id/pay", isAuth,
    expressAsyncHandler( async (req, res) => {
        //get specific order information
        const order = await Order.findById(req.params.id);
        if (order) {
            order.isPaid = true;
            order.paidAt = Date.now();
            order.payment.paymentResult = {
                payerID: req.body.payerID,
                paymentID: req.body.paymentID,
                orderID: req.body.orderID
            };
            const updatedOrder = await order.save();
            res.send({ message:"Payment Successful.", order: updatedOrder });
        } else {
            res.status(404).send({ message: "Order Not Found"})
        }
    })
);


export default orderRouter;